// Generated by CoffeeScript 1.7.1
var Track, colors, dispatch, full_track_yt, get_source, infos_sc, infos_yt, mongoose, play_track_yt, request, request_url, sources, track_gs, track_sc;

request = require('request');

colors = require('colors');

mongoose = require('mongoose');

Track = require('../models/track').Track;

sources = {
  youtube: {
    resolver: "https://www.googleapis.com/youtube/v3/videos?key=",
    content: "&part=snippet&id=",
    key: "AIzaSyCxL2W7WQKGQ_IKN9ug37rxeJm-Hr0t7Fw",
    documentation: "https://developers.google.com/youtube/v3/docs/videos?hl=fr"
  },
  soundcloud: {
    resolver: "https://api.soundcloud.com/resolve.json?consumer_key=",
    content: "&url=",
    key: "b45b1aa10f1ac2941910a7f0d10f8e28",
    documentation: "https://developers.soundcloud.com/docs/api/reference"
  },
  grooveshark: {
    resolver: "",
    content: "",
    key: "",
    documentation: "http://developers.grooveshark.com/docs/public_api/v3/"
  },
  spotify: {
    resolver: "",
    content: "",
    key: "",
    documentation: ""
  },
  deezer: {
    resolver: "",
    content: "",
    key: "",
    documentation: ""
  }
};

track_sc = "https://soundcloud.com/chrome-sparks/goddess-1";

track_gs = "http://grooveshark.com/#!/s/So+Hard+feat+Monica+Blaire/uA4MV?src=5";

full_track_yt = "http://www.youtube.com/watch?v=dR9GRK9vrlU";

play_track_yt = "https://www.youtube.com/watch?v=1JeLoOhnlTk&list=PLgx9GuZnpLj9PLAs-WFdPI_PHtxBRzppK";


/* find from which site is the video */

get_source = function(track, callback) {
  var index, res;
  for (index in sources) {
    if (track.indexOf(index) > -1) {
      res = index;
    }
  }
  return callback(res);
};

String.prototype.build_url = function(source) {
  var src;
  src = sources[source];
  return src.resolver + src.key + src.content + this;
};

request_url = function(url, callback) {
  return request(url, function(error, response, html) {
    if (error && (response.statusCode !== 200)) {
      return console.log("Error:" + err);
    } else {
      return callback(response.body);
    }
  });
};

Track.prototype.other_infos = function() {
  this.addedBy = "User1";
  this.addedDate = new Date();
  return this.order = 1;
};


/* get the information from the responses and create objects to be stored in our DB */

infos_sc = function(content, callback) {
  var track;
  track = new Track({
    title: content.title,
    author: content.user.username,
    url: content.uri,
    src: "soundcloud",
    id: content.id
  });
  track.other_infos();
  return callback(track);
};

infos_yt = function(content, callback) {
  var track;
  track = new Track({
    title: content.snippet.title,
    author: content.snippet.channelTitle,
    url: "http://www.youtube.com/watch?v=" + content.id,
    src: "youtube",
    id: content.id
  });
  track.other_infos();
  return callback(track);
};


/* manages the actions of dispatching between the different sources */

dispatch = function(track, callback) {
  return get_source(track, function(src) {
    var s, url;
    url = null;
    switch (src) {
      case "youtube":
        s = track.split("v=");
        s = s[1].split("&");
        track = s[0];
        break;
      case "soundcloud":
        break;
      default:
        console.log("SOURCE NOT SUPPORTED YET".red);
    }
    url = track.build_url(src);
    return request_url(url, function(res) {
      switch (src) {
        case "youtube":
          return infos_yt(JSON.parse(res).items[0], callback);
        case "soundcloud":
          return infos_sc(JSON.parse(res), callback);
      }
    });
  });
};

exports.dispatch = dispatch;
